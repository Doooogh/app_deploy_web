{
    "sourceFile": "src/views/deploy/history.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1731848862984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1731848862984,
            "name": "Commit-0",
            "content": "<template>\n  <div class=\"page-container\">\n    <div class=\"search-form\">\n      <el-form :inline=\"true\" :model=\"searchForm\" ref=\"searchForm\">\n        <el-form-item label=\"环境\">\n          <el-select v-model=\"searchForm.envId\" placeholder=\"请选择环境\" clearable>\n            <el-option\n              v-for=\"item in envOptions\"\n              :key=\"item.id\"\n              :label=\"item.name\"\n              :value=\"item.id\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"项目\">\n          <el-select v-model=\"searchForm.projectId\" placeholder=\"请选择项目\" clearable>\n            <el-option\n              v-for=\"item in projectOptions\"\n              :key=\"item.id\"\n              :label=\"item.name\"\n              :value=\"item.id\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"状态\">\n          <el-select v-model=\"searchForm.status\" placeholder=\"请选择状态\" clearable>\n            <el-option label=\"待发布\" value=\"0\"></el-option>\n            <el-option label=\"发布中\" value=\"1\"></el-option>\n            <el-option label=\"发布成功\" value=\"2\"></el-option>\n            <el-option label=\"发布失败\" value=\"3\"></el-option>\n            <el-option label=\"已回滚\" value=\"4\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleSearch\">搜索</el-button>\n          <el-button @click=\"resetSearch\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n\n    <el-tabs v-model=\"activeTab\" @tab-click=\"handleTabClick\">\n      <el-tab-pane \n        v-for=\"item in envOptions\" \n        :key=\"item.id\"\n        :label=\"item.name\"\n        :name=\"item.id.toString()\"\n      >\n        <el-table\n          v-loading=\"loading\"\n          :data=\"tableData\"\n        >\n          <el-table-column prop=\"projectName\" label=\"项目\" min-width=\"120\"></el-table-column>\n          <el-table-column prop=\"version\" label=\"版本\" width=\"120\"></el-table-column>\n          <el-table-column prop=\"hostCount\" label=\"主机数\" width=\"100\" align=\"center\"></el-table-column>\n          <el-table-column prop=\"status\" label=\"状态\" width=\"100\" align=\"center\">\n            <template slot-scope=\"scope\">\n              <el-tag :type=\"getStatusType(scope.row.status)\">\n                {{ getStatusText(scope.row.status) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"creator\" label=\"发布人\" width=\"120\"></el-table-column>\n          <el-table-column prop=\"createTime\" label=\"发布时间\" width=\"160\"></el-table-column>\n          <el-table-column label=\"操作\" width=\"300\" fixed=\"right\">\n            <template slot-scope=\"scope\">\n              <el-button \n                type=\"text\" \n                @click=\"handleDetail(scope.row)\"\n              >详情</el-button>\n              <el-button \n                type=\"text\" \n                @click=\"handleLog(scope.row)\"\n                v-if=\"scope.row.status !== 0\"\n              >日志</el-button>\n              <el-button \n                type=\"text\" \n                @click=\"handleRollback(scope.row)\"\n                v-if=\"scope.row.status === 2 && scope.row.isActive\"\n              >回滚</el-button>\n              <el-button \n                type=\"text\" \n                @click=\"handleRedeploy(scope.row)\"\n                v-if=\"scope.row.status === 3\"\n              >重新发布</el-button>\n              <el-button \n                type=\"text\" \n                class=\"danger\" \n                @click=\"handleCancel(scope.row)\"\n                v-if=\"scope.row.status === 0\"\n              >取消</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n\n        <el-pagination\n          :current-page=\"page.current\"\n          :page-sizes=\"[10, 20, 50, 100]\"\n          :page-size=\"page.size\"\n          :total=\"page.total\"\n          layout=\"total, sizes, prev, pager, next, jumper\"\n          @size-change=\"handleSizeChange\"\n          @current-change=\"handleCurrentChange\"\n        ></el-pagination>\n      </el-tab-pane>\n    </el-tabs>\n\n    <!-- 发布详情弹窗 -->\n    <el-dialog\n      :title=\"`发布详情 - ${currentDeploy.projectName || ''}`\"\n      :visible.sync=\"detailDialog.visible\"\n      width=\"800px\"\n    >\n      <el-descriptions title=\"基本信息\" :column=\"2\" border>\n        <el-descriptions-item label=\"环境\">{{ currentDeploy.envName }}</el-descriptions-item>\n        <el-descriptions-item label=\"项目\">{{ currentDeploy.projectName }}</el-descriptions-item>\n        <el-descriptions-item label=\"版本\">{{ currentDeploy.version }}</el-descriptions-item>\n        <el-descriptions-item label=\"部署目录\">/{{ currentDeploy.deployPath }}</el-descriptions-item>\n        <el-descriptions-item label=\"发布人\">{{ currentDeploy.creator }}</el-descriptions-item>\n        <el-descriptions-item label=\"发布时间\">{{ currentDeploy.createTime }}</el-descriptions-item>\n      </el-descriptions>\n\n      <el-descriptions title=\"主机列表\" :column=\"1\" border class=\"mt20\">\n        <el-descriptions-item>\n          <el-table :data=\"detailDialog.hosts\" size=\"small\">\n            <el-table-column prop=\"name\" label=\"主机名称\"></el-table-column>\n            <el-table-column prop=\"ip\" label=\"IP地址\"></el-table-column>\n            <el-table-column prop=\"status\" label=\"状态\" width=\"100\" align=\"center\">\n              <template slot-scope=\"scope\">\n                <el-tag :type=\"getHostStatusType(scope.row.status)\">\n                  {{ getHostStatusText(scope.row.status) }}\n                </el-tag>\n              </template>\n            </el-table-column>\n            <el-table-column label=\"操作\" width=\"100\" align=\"center\">\n              <template slot-scope=\"scope\">\n                <el-button \n                  type=\"text\" \n                  @click=\"handleHostLog(scope.row)\"\n                  v-if=\"scope.row.status !== 0\"\n                >日志</el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-descriptions-item>\n      </el-descriptions>\n\n      <el-descriptions title=\"执行脚本\" :column=\"1\" border class=\"mt20\">\n        <el-descriptions-item label=\"前置脚本\">\n          <template v-if=\"currentDeploy.beforeScripts?.length\">\n            <div \n              v-for=\"(script, index) in currentDeploy.beforeScripts\" \n              :key=\"index\"\n              class=\"script-info\"\n            >\n              {{ index + 1 }}. {{ script.name }}\n              <span v-if=\"script.params\" class=\"script-params\">\n                参数：{{ script.params }}\n              </span>\n            </div>\n          </template>\n          <span v-else>无</span>\n        </el-descriptions-item>\n        <el-descriptions-item label=\"后置脚本\">\n          <template v-if=\"currentDeploy.afterScripts?.length\">\n            <div \n              v-for=\"(script, index) in currentDeploy.afterScripts\" \n              :key=\"index\"\n              class=\"script-info\"\n            >\n              {{ index + 1 }}. {{ script.name }}\n              <span v-if=\"script.params\" class=\"script-params\">\n                参数：{{ script.params }}\n              </span>\n            </div>\n          </template>\n          <span v-else>无</span>\n        </el-descriptions-item>\n      </el-descriptions>\n    </el-dialog>\n\n    <!-- 日志弹窗 -->\n    <el-dialog\n      :title=\"`发布日志 ${currentHost ? `- ${currentHost.name}` : ''}`\"\n      :visible.sync=\"logDialog.visible\"\n      width=\"800px\"\n      :close-on-click-modal=\"false\"\n      custom-class=\"log-dialog\"\n    >\n      <div class=\"log-content\" v-loading=\"logDialog.loading\">\n        <pre ref=\"logContent\" v-html=\"logDialog.content\"></pre>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { \n  getEnvironmentList \n} from '@/api/environment'\nimport { \n  getProjectList \n} from '@/api/project'\nimport { \n  getDeployList,\n  getDeployDetail,\n  getDeployLog,\n  getHostLog,\n  cancelDeploy,\n  rollbackDeploy,\n  redeployDeploy\n} from '@/api/deploy'\n\nexport default {\n  name: 'DeployHistory',\n  data() {\n    return {\n      loading: false,\n      searchForm: {\n        envId: '',\n        projectId: '',\n        status: ''\n      },\n      envOptions: [],\n      projectOptions: [],\n      activeTab: '',\n      tableData: [],\n      page: {\n        current: 1,\n        size: 10,\n        total: 0\n      },\n      detailDialog: {\n        visible: false,\n        hosts: []\n      },\n      logDialog: {\n        visible: false,\n        loading: false,\n        content: ''\n      },\n      currentDeploy: {},\n      currentHost: null,\n      logWs: null\n    }\n  },\n  created() {\n    this.getEnvList()\n    this.getProjectList()\n  },\n  methods: {\n    async getEnvList() {\n      try {\n        const { data } = await getEnvironmentList()\n        this.envOptions = data\n        if (data.length) {\n          this.activeTab = data[0].id.toString()\n          this.searchForm.envId = data[0].id\n          this.getList()\n        }\n      } catch (error) {\n        console.error(error)\n      }\n    },\n    async getProjectList() {\n      try {\n        const { data } = await getProjectList()\n        this.projectOptions = data.list\n      } catch (error) {\n        console.error(error)\n      }\n    },\n    async getList() {\n      this.loading = true\n      try {\n        const { data } = await getDeployList({\n          ...this.searchForm,\n          page: this.page.current,\n          size: this.page.size\n        })\n        this.tableData = data.list\n        this.page.total = data.total\n      } catch (error) {\n        console.error(error)\n      }\n      this.loading = false\n    },\n    getStatusType(status) {\n      const map = {\n        0: 'info',    // 待发布\n        1: '',        // 发布中\n        2: 'success', // 发布成功\n        3: 'danger',  // 发布失败\n        4: 'warning'  // 已回滚\n      }\n      return map[status]\n    },\n    getStatusText(status) {\n      const map = {\n        0: '待发布',\n        1: '发布中',\n        2: '成功',\n        3: '失败',\n        4: '已回滚'\n      }\n      return map[status]\n    },\n    getHostStatusType(status) {\n      const map = {\n        0: 'info',    // 待发布\n        1: '',        // 发布中\n        2: 'success', // 发布成功\n        3: 'danger'   // 发布失败\n      }\n      return map[status]\n    },\n    getHostStatusText(status) {\n      const map = {\n        0: '待发布',\n        1: '发布中',\n        2: '成功',\n        3: '失败'\n      }\n      return map[status]\n    },\n    handleSearch() {\n      this.page.current = 1\n      this.getList()\n    },\n    resetSearch() {\n      this.$refs.searchForm.resetFields()\n      this.handleSearch()\n    },\n    handleTabClick() {\n      this.searchForm.envId = Number(this.activeTab)\n      this.handleSearch()\n    },\n    async handleDetail(row) {\n      this.currentDeploy = row\n      this.detailDialog.visible = true\n      try {\n        const { data } = await getDeployDetail(row.id)\n        this.detailDialog.hosts = data.hosts\n        Object.assign(this.currentDeploy, data)\n      } catch (error) {\n        console.error(error)\n      }\n    },\n    async handleLog(row) {\n      this.currentDeploy = row\n      this.currentHost = null\n      this.logDialog.visible = true\n      this.logDialog.loading = true\n      try {\n        const { data } = await getDeployLog(row.id)\n        this.logDialog.content = this.formatLog(data)\n        this.connectLogWs(row.id)\n      } catch (error) {\n        console.error(error)\n      }\n      this.logDialog.loading = false\n    },\n    async handleHostLog(host) {\n      this.currentHost = host\n      this.logDialog.visible = true\n      this.logDialog.loading = true\n      try {\n        const { data } = await getHostLog(this.currentDeploy.id, host.id)\n        this.logDialog.content = this.formatLog(data)\n        this.connectLogWs(this.currentDeploy.id, host.id)\n      } catch (error) {\n        console.error(error)\n      }\n      this.logDialog.loading = false\n    },\n    async handleCancel(row) {\n      try {\n        await this.$confirm('确认取消该发布单?', '提示', {\n          type: 'warning'\n        })\n        await cancelDeploy(row.id)\n        this.$message.success('取消成功')\n        this.getList()\n      } catch (error) {\n        console.error(error)\n      }\n    },\n    async handleRollback(row) {\n      try {\n        await this.$confirm('确认回滚该发布?', '提示', {\n          type: 'warning'\n        })\n        await rollbackDeploy(row.id)\n        this.$message.success('开始回滚')\n        this.getList()\n      } catch (error) {\n        console.error(error)\n      }\n    },\n    async handleRedeploy(row) {\n      try {\n        await this.$confirm('确认重新发布?', '提示', {\n          type: 'warning'\n        })\n        await redeployDeploy(row.id)\n        this.$message.success('开始重新发布')\n        this.getList()\n      } catch (error) {\n        console.error(error)\n      }\n    },\n    handleSizeChange(val) {\n      this.page.size = val\n      this.getList()\n    },\n    handleCurrentChange(val) {\n      this.page.current = val\n      this.getList()\n    },\n    formatLog(text) {\n      const colorMap = {\n        info: '#fff',\n        error: '#f56c6c',\n        success: '#67c23a'\n      }\n      return text.split('\\n').map(line => {\n        if (line.includes('[ERROR]')) {\n          return `<span style=\"color: ${colorMap.error}\">${line}</span>`\n        } else if (line.includes('[SUCCESS]')) {\n          return `<span style=\"color: ${colorMap.success}\">${line}</span>`\n        }\n        return `<span style=\"color: ${colorMap.info}\">${line}</span>`\n      }).join('\\n')\n    },\n    connectLogWs(deployId, hostId) {\n      if (this.logWs) {\n        this.logWs.close()\n      }\n\n      const wsUrl = hostId \n        ? `ws://localhost:3000/api/deploy/host/log/${deployId}/${hostId}`\n        : `ws://localhost:3000/api/deploy/log/${deployId}`\n\n      this.logWs = new WebSocket(wsUrl)\n      \n      this.logWs.onmessage = (event) => {\n        const data = JSON.parse(event.data)\n        if (data.type === 'log') {\n          this.logDialog.content += this.formatLog(data.content)\n          this.$nextTick(() => {\n            if (this.$refs.logContent) {\n              this.$refs.logContent.scrollTop = this.$refs.logContent.scrollHeight\n            }\n          })\n        }\n      }\n      \n      this.logWs.onerror = () => {\n        console.error('WebSocket连接失败')\n      }\n    }\n  },\n  beforeDestroy() {\n    if (this.logWs) {\n      this.logWs.close()\n    }\n  },\n  watch: {\n    'logDialog.visible'(val) {\n      if (!val && this.logWs) {\n        this.logWs.close()\n        this.logWs = null\n        this.logDialog.content = ''\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.mt20 {\n  margin-top: 20px;\n}\n\n.script-info {\n  line-height: 1.8;\n\n  .script-params {\n    color: #909399;\n    margin-left: 10px;\n  }\n}\n\n.log-dialog {\n  :deep(.el-dialog__body) {\n    padding: 0;\n  }\n}\n\n.log-content {\n  height: 500px;\n  padding: 10px;\n  background-color: #1e1e1e;\n  font-family: Consolas, Monaco, monospace;\n  overflow: auto;\n\n  pre {\n    margin: 0;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n  }\n}\n</style> "
        }
    ]
}