{
    "sourceFile": "src/views/deploy/detail.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1731848948109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1731848948109,
            "name": "Commit-0",
            "content": "<template>\n  <div class=\"page-container\">\n    <!-- 基本信息 -->\n    <div class=\"info-card\">\n      <div class=\"info-card__title\">发布信息</div>\n      <el-descriptions :column=\"3\" border>\n        <el-descriptions-item label=\"环境\">{{ deploy.envName }}</el-descriptions-item>\n        <el-descriptions-item label=\"项目\">{{ deploy.projectName }}</el-descriptions-item>\n        <el-descriptions-item label=\"版本\">{{ deploy.version }}</el-descriptions-item>\n        <el-descriptions-item label=\"部署目录\">/{{ deploy.deployPath }}</el-descriptions-item>\n        <el-descriptions-item label=\"发布人\">{{ deploy.creator }}</el-descriptions-item>\n        <el-descriptions-item label=\"发布时间\">{{ deploy.createTime }}</el-descriptions-item>\n      </el-descriptions>\n    </div>\n\n    <!-- 发布进度 -->\n    <div class=\"info-card\">\n      <div class=\"info-card__title\">发布进度</div>\n      <el-steps :active=\"deploy.step\" align-center finish-status=\"success\">\n        <el-step title=\"准备\" description=\"准备发布环境\"></el-step>\n        <el-step title=\"前置脚本\" description=\"执行前置脚本\"></el-step>\n        <el-step title=\"部署\" description=\"部署项目文件\"></el-step>\n        <el-step title=\"后置脚本\" description=\"执行后置脚本\"></el-step>\n        <el-step title=\"完成\" description=\"发布完成\"></el-step>\n      </el-steps>\n    </div>\n\n    <!-- 主机列表 -->\n    <div class=\"info-card\">\n      <div class=\"info-card__title\">主机列表</div>\n      <el-table :data=\"deploy.hosts\" v-loading=\"loading\">\n        <el-table-column prop=\"name\" label=\"主机名称\"></el-table-column>\n        <el-table-column prop=\"ip\" label=\"IP地址\"></el-table-column>\n        <el-table-column prop=\"status\" label=\"状态\" width=\"100\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getHostStatusType(scope.row.status)\">\n              {{ getHostStatusText(scope.row.status) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"progress\" label=\"进度\" width=\"200\">\n          <template slot-scope=\"scope\">\n            <el-progress \n              :percentage=\"scope.row.progress\" \n              :status=\"getProgressStatus(scope.row)\"\n            ></el-progress>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"100\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-button \n              type=\"text\" \n              @click=\"handleViewLog(scope.row)\"\n              v-if=\"scope.row.status !== 0\"\n            >查看日志</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n\n    <!-- 脚本配置 -->\n    <div class=\"info-card\">\n      <div class=\"info-card__title\">脚本配置</div>\n      <el-descriptions :column=\"1\" border>\n        <el-descriptions-item label=\"前置脚本\">\n          <template v-if=\"deploy.beforeScripts?.length\">\n            <div \n              v-for=\"(script, index) in deploy.beforeScripts\" \n              :key=\"index\"\n              class=\"script-info\"\n            >\n              {{ index + 1 }}. {{ script.name }}\n              <span v-if=\"script.params\" class=\"script-params\">\n                参数：{{ script.params }}\n              </span>\n            </div>\n          </template>\n          <span v-else>无</span>\n        </el-descriptions-item>\n        <el-descriptions-item label=\"后置脚本\">\n          <template v-if=\"deploy.afterScripts?.length\">\n            <div \n              v-for=\"(script, index) in deploy.afterScripts\" \n              :key=\"index\"\n              class=\"script-info\"\n            >\n              {{ index + 1 }}. {{ script.name }}\n              <span v-if=\"script.params\" class=\"script-params\">\n                参数：{{ script.params }}\n              </span>\n            </div>\n          </template>\n          <span v-else>无</span>\n        </el-descriptions-item>\n      </el-descriptions>\n    </div>\n\n    <!-- 日志弹窗 -->\n    <el-dialog\n      :title=\"`部署日志 - ${currentHost?.name || ''}`\"\n      :visible.sync=\"logDialog.visible\"\n      width=\"800px\"\n      :close-on-click-modal=\"false\"\n      custom-class=\"log-dialog\"\n    >\n      <div class=\"log-content\" v-loading=\"logDialog.loading\">\n        <pre ref=\"logContent\" v-html=\"logDialog.content\"></pre>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { getDeployDetail, getHostLog } from '@/api/deploy'\n\nexport default {\n  name: 'DeployDetail',\n  data() {\n    return {\n      loading: false,\n      deploy: {},\n      logDialog: {\n        visible: false,\n        loading: false,\n        content: ''\n      },\n      currentHost: null,\n      logWs: null,\n      timer: null\n    }\n  },\n  created() {\n    this.getDetail()\n    // 如果发布未完成，定时刷新\n    this.startRefresh()\n  },\n  beforeDestroy() {\n    this.stopRefresh()\n    if (this.logWs) {\n      this.logWs.close()\n    }\n  },\n  methods: {\n    async getDetail() {\n      this.loading = true\n      try {\n        const { data } = await getDeployDetail(this.$route.params.id)\n        this.deploy = data\n      } catch (error) {\n        console.error(error)\n      }\n      this.loading = false\n    },\n    getHostStatusType(status) {\n      const map = {\n        0: 'info',    // 待发布\n        1: '',        // 发布中\n        2: 'success', // 发布成功\n        3: 'danger'   // 发布失败\n      }\n      return map[status]\n    },\n    getHostStatusText(status) {\n      const map = {\n        0: '待发布',\n        1: '发布中',\n        2: '成功',\n        3: '失败'\n      }\n      return map[status]\n    },\n    getProgressStatus(host) {\n      if (host.status === 2) return 'success'\n      if (host.status === 3) return 'exception'\n      return ''\n    },\n    async handleViewLog(host) {\n      this.currentHost = host\n      this.logDialog.visible = true\n      this.logDialog.loading = true\n      try {\n        const { data } = await getHostLog(this.deploy.id, host.id)\n        this.logDialog.content = this.formatLog(data)\n        this.connectLogWs(host.id)\n      } catch (error) {\n        console.error(error)\n      }\n      this.logDialog.loading = false\n    },\n    formatLog(text) {\n      const colorMap = {\n        info: '#fff',\n        error: '#f56c6c',\n        success: '#67c23a'\n      }\n      return text.split('\\n').map(line => {\n        if (line.includes('[ERROR]')) {\n          return `<span style=\"color: ${colorMap.error}\">${line}</span>`\n        } else if (line.includes('[SUCCESS]')) {\n          return `<span style=\"color: ${colorMap.success}\">${line}</span>`\n        }\n        return `<span style=\"color: ${colorMap.info}\">${line}</span>`\n      }).join('\\n')\n    },\n    connectLogWs(hostId) {\n      if (this.logWs) {\n        this.logWs.close()\n      }\n\n      this.logWs = new WebSocket(`ws://localhost:3000/api/deploy/host/log/${this.deploy.id}/${hostId}`)\n      \n      this.logWs.onmessage = (event) => {\n        const data = JSON.parse(event.data)\n        if (data.type === 'log') {\n          this.logDialog.content += this.formatLog(data.content)\n          this.$nextTick(() => {\n            if (this.$refs.logContent) {\n              this.$refs.logContent.scrollTop = this.$refs.logContent.scrollHeight\n            }\n          })\n        }\n      }\n      \n      this.logWs.onerror = () => {\n        console.error('WebSocket连接失败')\n      }\n    },\n    startRefresh() {\n      if ([0, 1].includes(this.deploy.status)) {\n        this.timer = setInterval(() => {\n          this.getDetail()\n        }, 3000)\n      }\n    },\n    stopRefresh() {\n      if (this.timer) {\n        clearInterval(this.timer)\n        this.timer = null\n      }\n    }\n  },\n  watch: {\n    'deploy.status'(val) {\n      if (![0, 1].includes(val)) {\n        this.stopRefresh()\n      }\n    },\n    'logDialog.visible'(val) {\n      if (!val && this.logWs) {\n        this.logWs.close()\n        this.logWs = null\n        this.logDialog.content = ''\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.info-card {\n  background: #fff;\n  padding: 20px;\n  border-radius: 4px;\n  margin-bottom: 20px;\n  \n  &__title {\n    font-size: 16px;\n    color: #303133;\n    margin-bottom: 20px;\n    font-weight: 500;\n  }\n}\n\n.script-info {\n  line-height: 1.8;\n\n  .script-params {\n    color: #909399;\n    margin-left: 10px;\n  }\n}\n\n.log-dialog {\n  :deep(.el-dialog__body) {\n    padding: 0;\n  }\n}\n\n.log-content {\n  height: 500px;\n  padding: 10px;\n  background-color: #1e1e1e;\n  font-family: Consolas, Monaco, monospace;\n  overflow: auto;\n\n  pre {\n    margin: 0;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n  }\n}\n</style> "
        }
    ]
}