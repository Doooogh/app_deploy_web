{
    "sourceFile": "src/views/script/components/ScriptTestDialog.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1731848659827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1731848659827,
            "name": "Commit-0",
            "content": "<template>\n  <el-dialog\n    :title=\"`脚本测试 - ${data ? data.name : ''}`\"\n    :visible.sync=\"dialogVisible\"\n    width=\"800px\"\n    :close-on-click-modal=\"false\"\n    custom-class=\"script-test-dialog\"\n  >\n    <div v-if=\"data\" v-loading=\"loading\">\n      <el-form ref=\"form\" :model=\"form\" label-width=\"100px\">\n        <el-form-item \n          v-for=\"(param, index) in data.params\"\n          :key=\"index\"\n          :label=\"`${param}`\"\n          :prop=\"`params.${index}`\"\n          :rules=\"{ required: true, message: '请输入参数值', trigger: 'blur' }\"\n        >\n          <el-input v-model=\"form.params[index]\" placeholder=\"请输入参数值\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"测试主机\" prop=\"hostId\">\n          <el-select \n            v-model=\"form.hostId\" \n            placeholder=\"请选择测试主机\"\n            filterable\n          >\n            <el-option\n              v-for=\"item in hostOptions\"\n              :key=\"item.id\"\n              :label=\"`${item.name}(${item.ip})`\"\n              :value=\"item.id\"\n              :disabled=\"item.status !== 1\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n\n      <div class=\"log-content\" v-show=\"logVisible\">\n        <div class=\"log-header\">\n          <span>执行日志</span>\n          <el-button type=\"text\" @click=\"handleClearLog\">清空日志</el-button>\n        </div>\n        <pre ref=\"logContent\" class=\"log-body\" v-html=\"logContent\"></pre>\n      </div>\n    </div>\n    <div slot=\"footer\">\n      <el-button @click=\"dialogVisible = false\">关 闭</el-button>\n      <el-button type=\"primary\" @click=\"handleTest\" :loading=\"testing\">\n        开始测试\n      </el-button>\n    </div>\n  </el-dialog>\n</template>\n\n<script>\nimport { getHostList } from '@/api/host'\nimport { testScript } from '@/api/script'\n\nexport default {\n  name: 'ScriptTestDialog',\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    data: {\n      type: Object,\n      default: null\n    }\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      loading: false,\n      testing: false,\n      form: {\n        params: [],\n        hostId: ''\n      },\n      hostOptions: [],\n      logVisible: false,\n      logContent: ''\n    }\n  },\n  watch: {\n    visible(val) {\n      this.dialogVisible = val\n      if (val && this.data) {\n        this.getHostList()\n        this.resetForm()\n      }\n    },\n    dialogVisible(val) {\n      this.$emit('update:visible', val)\n      if (!val) {\n        this.logVisible = false\n        this.logContent = ''\n      }\n    },\n    logContent() {\n      this.$nextTick(() => {\n        if (this.$refs.logContent) {\n          this.$refs.logContent.scrollTop = this.$refs.logContent.scrollHeight\n        }\n      })\n    }\n  },\n  methods: {\n    async getHostList() {\n      this.loading = true\n      try {\n        const { data } = await getHostList()\n        this.hostOptions = data.list\n      } catch (error) {\n        console.error(error)\n      }\n      this.loading = false\n    },\n    resetForm() {\n      this.form = {\n        params: Array(this.data.params.length).fill(''),\n        hostId: ''\n      }\n    },\n    handleClearLog() {\n      this.logContent = ''\n    },\n    appendLog(text, type = 'info') {\n      const colorMap = {\n        info: '#fff',\n        error: '#f56c6c',\n        success: '#67c23a'\n      }\n      this.logContent += `<span style=\"color: ${colorMap[type]}\">${text}\\n</span>`\n    },\n    async handleTest() {\n      try {\n        await this.$refs.form.validate()\n        this.testing = true\n        this.logVisible = true\n        this.logContent = ''\n        \n        this.appendLog('开始执行脚本...')\n        \n        const ws = new WebSocket(`ws://localhost:3000/api/script/test/${this.data.id}`)\n        \n        ws.onmessage = (event) => {\n          const data = JSON.parse(event.data)\n          if (data.type === 'log') {\n            this.appendLog(data.content)\n          } else if (data.type === 'error') {\n            this.appendLog(data.content, 'error')\n          } else if (data.type === 'end') {\n            this.appendLog('脚本执行完成', data.success ? 'success' : 'error')\n            ws.close()\n          }\n        }\n        \n        ws.onopen = () => {\n          ws.send(JSON.stringify({\n            hostId: this.form.hostId,\n            params: this.form.params\n          }))\n        }\n        \n        ws.onerror = () => {\n          this.appendLog('WebSocket连接失败', 'error')\n        }\n        \n        ws.onclose = () => {\n          this.testing = false\n        }\n      } catch (error) {\n        console.error(error)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.script-test-dialog {\n  :deep(.el-dialog__body) {\n    padding-bottom: 0;\n  }\n}\n\n.log-content {\n  margin-top: 20px;\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n\n  .log-header {\n    padding: 8px 15px;\n    border-bottom: 1px solid #dcdfe6;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #f5f7fa;\n  }\n\n  .log-body {\n    height: 300px;\n    margin: 0;\n    padding: 10px;\n    background-color: #1e1e1e;\n    color: #fff;\n    font-family: Consolas, Monaco, monospace;\n    overflow: auto;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n  }\n}\n</style> "
        }
    ]
}