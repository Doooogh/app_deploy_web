{
    "sourceFile": "src/views/script/components/ScriptFormDialog.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1731848659827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1731848659827,
            "name": "Commit-0",
            "content": "<template>\n  <el-dialog\n    :title=\"type === 'add' ? '新增脚本' : '编辑脚本'\"\n    :visible.sync=\"dialogVisible\"\n    width=\"800px\"\n    :close-on-click-modal=\"false\"\n    @close=\"handleClose\"\n  >\n    <el-form\n      ref=\"form\"\n      :model=\"form\"\n      :rules=\"rules\"\n      label-width=\"100px\"\n      v-loading=\"loading\"\n    >\n      <el-form-item label=\"脚本名称\" prop=\"name\">\n        <el-input v-model=\"form.name\" placeholder=\"请输入脚本名称\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"脚本类型\" prop=\"type\">\n        <el-select v-model=\"form.type\" placeholder=\"请选择脚本类型\">\n          <el-option label=\"Shell\" value=\"shell\"></el-option>\n          <el-option label=\"Python\" value=\"python\"></el-option>\n          <el-option label=\"Node.js\" value=\"nodejs\"></el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"脚本内容\" prop=\"content\">\n        <monaco-editor\n          v-model=\"form.content\"\n          :language=\"getEditorLanguage\"\n          :height=\"400\"\n          theme=\"vs-dark\"\n        ></monaco-editor>\n      </el-form-item>\n      <el-form-item label=\"参数配置\">\n        <div class=\"param-list\">\n          <div \n            v-for=\"(param, index) in form.params\" \n            :key=\"index\" \n            class=\"param-item\"\n          >\n            <el-input v-model=\"form.params[index]\" placeholder=\"请输入参数名称\">\n              <template slot=\"prepend\">${{ index + 1 }}</template>\n              <el-button \n                slot=\"append\" \n                icon=\"el-icon-delete\"\n                @click=\"handleDeleteParam(index)\"\n              ></el-button>\n            </el-input>\n          </div>\n          <el-button \n            type=\"dashed\" \n            class=\"add-param\" \n            @click=\"handleAddParam\"\n          >\n            <i class=\"el-icon-plus\"></i>\n            添加参数\n          </el-button>\n        </div>\n        <div class=\"form-tip\">参数使用${1}、${2}的形式在脚本中引用</div>\n      </el-form-item>\n      <el-form-item label=\"描述\" prop=\"description\">\n        <el-input\n          v-model=\"form.description\"\n          type=\"textarea\"\n          :rows=\"3\"\n          placeholder=\"请输入描述\"\n        ></el-input>\n      </el-form-item>\n    </el-form>\n    <div slot=\"footer\">\n      <el-button @click=\"dialogVisible = false\">取 消</el-button>\n      <el-button type=\"primary\" @click=\"handleSubmit\" :loading=\"submitting\">\n        确 定\n      </el-button>\n    </div>\n  </el-dialog>\n</template>\n\n<script>\nimport { addScript, updateScript } from '@/api/script'\nimport MonacoEditor from '@/components/MonacoEditor'\n\nexport default {\n  name: 'ScriptFormDialog',\n  components: {\n    MonacoEditor\n  },\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: 'add'\n    },\n    data: {\n      type: Object,\n      default: null\n    }\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      loading: false,\n      submitting: false,\n      form: {\n        name: '',\n        type: 'shell',\n        content: '',\n        params: [],\n        description: ''\n      },\n      rules: {\n        name: [\n          { required: true, message: '请输入脚本名称', trigger: 'blur' },\n          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }\n        ],\n        type: [\n          { required: true, message: '请选择脚本类型', trigger: 'change' }\n        ],\n        content: [\n          { required: true, message: '请输入脚本内容', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    getEditorLanguage() {\n      const map = {\n        shell: 'shell',\n        python: 'python',\n        nodejs: 'javascript'\n      }\n      return map[this.form.type] || 'plaintext'\n    }\n  },\n  watch: {\n    visible(val) {\n      this.dialogVisible = val\n    },\n    dialogVisible(val) {\n      this.$emit('update:visible', val)\n    },\n    data: {\n      handler(val) {\n        if (val) {\n          this.form = { ...val }\n        } else {\n          this.resetForm()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    resetForm() {\n      this.form = {\n        name: '',\n        type: 'shell',\n        content: '',\n        params: [],\n        description: ''\n      }\n    },\n    handleAddParam() {\n      this.form.params.push('')\n    },\n    handleDeleteParam(index) {\n      this.form.params.splice(index, 1)\n    },\n    async handleSubmit() {\n      try {\n        await this.$refs.form.validate()\n        this.submitting = true\n        \n        // 过滤空参数\n        this.form.params = this.form.params.filter(item => item)\n        \n        if (this.type === 'add') {\n          await addScript(this.form)\n          this.$message.success('添加成功')\n        } else {\n          await updateScript(this.form)\n          this.$message.success('更新成功')\n        }\n        \n        this.$emit('success')\n      } catch (error) {\n        console.error(error)\n      }\n      this.submitting = false\n    },\n    handleClose() {\n      this.$refs.form.resetFields()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.param-list {\n  .param-item {\n    margin-bottom: 10px;\n  }\n}\n\n.add-param {\n  width: 100%;\n  border-style: dashed;\n}\n\n.form-tip {\n  font-size: 12px;\n  color: #909399;\n  line-height: 1.2;\n  padding-top: 4px;\n}\n</style> "
        }
    ]
}